// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Toast Should support Rtl display 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Toast
    autoClose={false}
    bodyClassName={null}
    className={null}
    closeButton={
      <CloseButton
        ariaLabel="close"
      />
    }
    closeOnClick={true}
    closeToast={[Function]}
    draggable={true}
    draggablePercent={80}
    hideProgressBar={false}
    in={true}
    newestOnTop={false}
    onClose={[Function]}
    onOpen={[Function]}
    pauseOnFocusLoss={true}
    pauseOnHover={true}
    position="top-right"
    progressClassName={null}
    progressStyle={null}
    role="alert"
    rtl={true}
    style={null}
    toastClassName={null}
    transition={[Function]}
    type="default"
    updateId={null}
  >
    FooBar
  </Toast>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "appear": true,
      "children": <div
        className="Toastify__toast Toastify__toast--default Toastify__toast--rtl"
        onClick={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        onTransitionEnd={[Function]}
      >
        <div
          className="Toastify__toast-body"
          role="alert"
        >
          FooBar
        </div>
        <CloseButton
          ariaLabel="close"
        />
      </div>,
      "in": true,
      "onExited": undefined,
      "position": "top-right",
      "preventExitTransition": false,
      "unmountOnExit": true,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="Toastify__toast-body"
            role="alert"
          >
            FooBar
          </div>,
          <CloseButton
            ariaLabel="close"
          />,
          false,
        ],
        "className": "Toastify__toast Toastify__toast--default Toastify__toast--rtl",
        "onClick": [Function],
        "onMouseDown": [Function],
        "onTouchStart": [Function],
        "onTransitionEnd": [Function],
      },
      "ref": [Function],
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "FooBar",
            "className": "Toastify__toast-body",
            "role": "alert",
          },
          "ref": null,
          "rendered": "FooBar",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "ariaLabel": "close",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "appear": true,
        "children": <div
          className="Toastify__toast Toastify__toast--default Toastify__toast--rtl"
          onClick={[Function]}
          onMouseDown={[Function]}
          onTouchStart={[Function]}
          onTransitionEnd={[Function]}
        >
          <div
            className="Toastify__toast-body"
            role="alert"
          >
            FooBar
          </div>
          <CloseButton
            ariaLabel="close"
          />
        </div>,
        "in": true,
        "onExited": undefined,
        "position": "top-right",
        "preventExitTransition": false,
        "unmountOnExit": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="Toastify__toast-body"
              role="alert"
            >
              FooBar
            </div>,
            <CloseButton
              ariaLabel="close"
            />,
            false,
          ],
          "className": "Toastify__toast Toastify__toast--default Toastify__toast--rtl",
          "onClick": [Function],
          "onMouseDown": [Function],
          "onTouchStart": [Function],
          "onTransitionEnd": [Function],
        },
        "ref": [Function],
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "FooBar",
              "className": "Toastify__toast-body",
              "role": "alert",
            },
            "ref": null,
            "rendered": "FooBar",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "ariaLabel": "close",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
